/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projeklibrary;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author LUI
 */
public class Buku extends javax.swing.JPanel {

    /**
     * Creates new form Buku
     */
    public boolean transaksi = false;

    public Buku() {
        initComponents();
//        tbl.setModel((TableModel) tbl);
        loadData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonTambah = new javax.swing.JButton();
        jButtonHapus = new javax.swing.JButton();
        jButtonUbah = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        tf_cari = new javax.swing.JTextField();
        cbx_cari = new javax.swing.JComboBox<>();
        btnCari = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Book1.png"))); // NOI18N
        jLabel1.setText("DATA BUKU PERPUSTAKAAN");

        jButtonTambah.setText("TAMBAH");
        jButtonTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTambahActionPerformed(evt);
            }
        });

        jButtonHapus.setText("HAPUS");
        jButtonHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHapusActionPerformed(evt);
            }
        });

        jButtonUbah.setText("UBAH");
        jButtonUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUbahActionPerformed(evt);
            }
        });

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID BUKU", "JUDUL", "ISBN", "PENERBIT", "PENGARANG"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        tf_cari.setText("Cari");
        tf_cari.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tf_cariFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_cariFocusLost(evt);
            }
        });
        tf_cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_cariActionPerformed(evt);
            }
        });
        tf_cari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_cariKeyTyped(evt);
            }
        });

        cbx_cari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Buku", "Judul", "ISBN", "Pengarang" }));
        cbx_cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_cariActionPerformed(evt);
            }
        });

        btnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Search.png"))); // NOI18N
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(274, 274, 274))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonTambah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tf_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cbx_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbx_cari, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonTambah)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonHapus)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonUbah)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTambahActionPerformed
        new InputBuku(null, true).setVisible(true);
        loadData();
    }//GEN-LAST:event_jButtonTambahActionPerformed

    private void tf_cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_cariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_cariActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        String sc = tf_cari.getText();
        switch (cbx_cari.getSelectedIndex()) {
            case 0:
                cariID(sc);
                break;
            case 1:
                cariJudul(sc);
                break;
            case 2:
                cariISBN(sc);
                break;
            case 3:
                cariPengarang(sc);
                break;

        }
        //tbl.setData(list);  
    }//GEN-LAST:event_btnCariActionPerformed

    private void jButtonHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHapusActionPerformed
        String s = (String) tbl.getValueAt(tbl.getSelectedRow(), 0);
        String sql = "DELETE FROM PENGARANG WHERE ID_BUKU = ?; DELETE FROM KATEGORI_BUKU WHERE ID_BUKU = ?;";
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Buku_1 p = em.find(Buku_1.class, s);
        Query query = em.createNativeQuery(sql);
        query.setParameter(1, s);
        query.setParameter(2, s);
        query.executeUpdate();
        em.remove(p);
        em.getTransaction().commit();
        em.close();
        loadData();

    }//GEN-LAST:event_jButtonHapusActionPerformed

    private void cbx_cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_cariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_cariActionPerformed

    private void tf_cariFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_cariFocusGained
        String s = tf_cari.getText();
        if (s.equals("Cari")) {
            tf_cari.setText("");
        }
    }//GEN-LAST:event_tf_cariFocusGained

    private void tf_cariFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_cariFocusLost
        String s = tf_cari.getText();
        if (s.equals("")) {
            tf_cari.setText("Cari");
        }
    }//GEN-LAST:event_tf_cariFocusLost

    private void tf_cariKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_cariKeyTyped
        char c = evt.getKeyChar();
        if (c == '\n') {
            btnCariActionPerformed(null);
        }
    }//GEN-LAST:event_tf_cariKeyTyped

    private void jButtonUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUbahActionPerformed

        if (tbl.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Pilih Data Terlebih Dahulu");
        } else {
            String s = (String) tbl.getValueAt(tbl.getSelectedRow(), 0);
            new InputBuku(null, true, s).setVisible(true);
        }
        loadData();

    }//GEN-LAST:event_jButtonUbahActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JComboBox<String> cbx_cari;
    private javax.swing.JButton jButtonHapus;
    private javax.swing.JButton jButtonTambah;
    private javax.swing.JButton jButtonUbah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField tf_cari;
    // End of variables declaration//GEN-END:variables

    private void setColWidht() {
        int[] noCol = {0, 1, 2, 3, 4, 6};
        int[] noColW = {35, 80, 200, 150, 100, 70};

        TableColumnModel tblModel = tbl.getColumnModel();
        for (int i = 0; i < noCol.length; i++) {
            tblModel.getColumn(noCol[i]).setPreferredWidth(noColW[i]);
            tblModel.getColumn(noCol[i]).setMaxWidth(noColW[i]);
            tblModel.getColumn(noCol[i]).setMinWidth(noColW[i]);
        }
    }

    private void loadData() {
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Query query = em.createQuery("SELECT b FROM Buku_1 b ORDER BY b.idBuku");
        List<Buku_1> list = query.getResultList();
        em.getTransaction().commit();
        em.close();
        DefaultTableModel tbl1 = (DefaultTableModel) tbl.getModel();
        tbl1.setRowCount(0);
        for (int i = 0; i < list.size(); i++) {
            Buku_1 b = list.get(i);
            b.setKategori(ambilKategori(b.getIdBuku()));
            b.setPengarang(ambilPengarang(b.getIdBuku()));
            list.set(i, b);
            String peng = "";
            for (String p : b.getPengarang()) {
                if (peng.equals("")) {
                    peng = p;
                } else {
                    peng = peng + ", " + p;
                }
            }
            tbl1.addRow(new Object[]{
                b.getIdBuku(), b.getJudul(), b.getIsbn(), b.getPenerbit(), peng
            });
        }
        tbl.setModel(tbl1);

    }

    List<String> ambilKategori(String id) {
        String sql = "SELECT KATEGORI FROM KATEGORI_BUKU WHERE ID_BUKU = ?";
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Query query = em.createNativeQuery(sql);
        query.setParameter(1, id);
        List<String> list = query.getResultList();
        em.getTransaction().commit();
        em.close();
        return list;
    }

    List<String> ambilPengarang(String id) {
        String sql = "SELECT NAMA_PENGARANG FROM PENGARANG WHERE ID_BUKU = ?";
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Query query = em.createNativeQuery(sql);
        query.setParameter(1, id);
        List<String> list = query.getResultList();
        em.getTransaction().commit();
        em.close();
        return list;
    }

    void cariID(String id) {
        DefaultTableModel tbl1 = (DefaultTableModel) tbl.getModel();
        tbl1.setRowCount(0);
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Query query = em.createQuery("SELECT b FROM Buku_1 b WHERE LOWER(b.idBuku) LIKE :idBuku ORDER BY b.idBuku");
        query.setParameter("idBuku", "%" + id.toLowerCase() + "%");
        List<Buku_1> list = query.getResultList();
        em.getTransaction().commit();
        em.close();
        for (int i = 0; i < list.size(); i++) {
            Buku_1 b = list.get(i);
            b.setKategori(ambilKategori(b.getIdBuku()));
            b.setPengarang(ambilPengarang(b.getIdBuku()));
            list.set(i, b);
            String peng = "";
            for (String p : b.getPengarang()) {
                if (peng.equals("")) {
                    peng = p;
                } else {
                    peng = peng + ", " + p;
                }
            }
            tbl1.addRow(new Object[]{
                b.getIdBuku(), b.getJudul(), b.getIsbn(), b.getPenerbit(), peng
            });
        }
    }

    void cariJudul(String id) {
        DefaultTableModel tbl1 = (DefaultTableModel) tbl.getModel();
        tbl1.setRowCount(0);
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Query query = em.createQuery("SELECT b FROM Buku_1 b WHERE LOWER(b.judul) LIKE :judul ORDER BY b.idBuku");
        query.setParameter("judul", "%" + id.toLowerCase() + "%");
        List<Buku_1> list = query.getResultList();
        em.getTransaction().commit();
        em.close();
        for (int i = 0; i < list.size(); i++) {
            Buku_1 b = list.get(i);
            b.setKategori(ambilKategori(b.getIdBuku()));
            b.setPengarang(ambilPengarang(b.getIdBuku()));
            list.set(i, b);
            String peng = "";
            for (String p : b.getPengarang()) {
                if (peng.equals("")) {
                    peng = p;
                } else {
                    peng = peng + ", " + p;
                }
            }
            tbl1.addRow(new Object[]{
                b.getIdBuku(), b.getJudul(), b.getIsbn(), b.getPenerbit(), peng
            });
        }
    }

    void cariISBN(String id) {
        DefaultTableModel tbl1 = (DefaultTableModel) tbl.getModel();
        tbl1.setRowCount(0);
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Query query = em.createQuery("SELECT b FROM Buku_1 b WHERE LOWER(b.isbn) LIKE :isbn ORDER BY b.idBuku");
        query.setParameter("isbn", "%" + id.toLowerCase() + "%");
        List<Buku_1> list = query.getResultList();
        em.getTransaction().commit();
        em.close();
        for (int i = 0; i < list.size(); i++) {
            Buku_1 b = list.get(i);
            b.setKategori(ambilKategori(b.getIdBuku()));
            b.setPengarang(ambilPengarang(b.getIdBuku()));
            list.set(i, b);
            String peng = "";
            for (String p : b.getPengarang()) {
                if (peng.equals("")) {
                    peng = p;
                } else {
                    peng = peng + ", " + p;
                }
            }
            tbl1.addRow(new Object[]{
                b.getIdBuku(), b.getJudul(), b.getIsbn(), b.getPenerbit(), peng
            });
        }
    }

    void cariPengarang(String pengarang) {
        String sql = "SELECT b.* FROM Buku b WHERE b.id_buku IN "
                + "(SELECT p.ID_BUKU FROM PENGARANG p WHERE LOWER(p.NAMA_PENGARANG) LIKE ?) "
                + "ORDER BY b.id_buku";
        DefaultTableModel tbl1 = (DefaultTableModel) tbl.getModel();
        tbl1.setRowCount(0);
        EntityManager em = Persistence.createEntityManagerFactory("ProjekLibraryPU").createEntityManager();
        em.getTransaction().begin();
        Query query = em.createNativeQuery(sql, Buku.class);
        query.setParameter(1, "%" + pengarang.toLowerCase() + "%");
        List<Buku_1> list = query.getResultList();
        em.getTransaction().commit();
        em.close();
        for (int i = 0; i < list.size(); i++) {
            Buku_1 b = list.get(i);
            b.setKategori(ambilKategori(b.getIdBuku()));
            b.setPengarang(ambilPengarang(b.getIdBuku()));
            list.set(i, b);
            String peng = "";
            for (String p : b.getPengarang()) {
                if (peng.equals("")) {
                    peng = p;
                } else {
                    peng = peng + ", " + p;
                }
            }
            tbl1.addRow(new Object[]{
                b.getIdBuku(), b.getJudul(), b.getIsbn(), b.getPenerbit(), peng
            });
        }
    }

}
